"""add_tenant_authentication_fields

Revision ID: bf2ab8c46db9
Revises: 2ada75057962
Create Date: 2025-08-17 08:25:36.530420

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'bf2ab8c46db9'
down_revision: Union[str, Sequence[str], None] = '2ada75057962'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Add nullable columns first
    op.add_column('tenant', sa.Column('username', sa.String(length=255), nullable=True))
    op.add_column('tenant', sa.Column('password_hash', sa.String(length=255), nullable=True))
    op.add_column('tenant', sa.Column('email', sa.String(length=255), nullable=True))
    op.add_column('tenant', sa.Column('reset_token', sa.String(length=255), nullable=True))
    op.add_column('tenant', sa.Column('reset_token_expires', sa.DateTime(timezone=True), nullable=True))
    
    # Update existing rows with default values
    connection = op.get_bind()
    
    # Get existing tenants and set default usernames based on domain
    result = connection.execute(sa.text("SELECT id, domain FROM tenant WHERE username IS NULL"))
    for row in result:
        # Create username from domain (remove special chars, take first part)
        domain_username = row.domain.split('.')[0].replace('-', '_').replace('@', '_')
        # Create a default password hash (users will need to reset)
        default_password_hash = '$2b$12$defaultpasswordhash.needsreset'
        
        connection.execute(
            sa.text("UPDATE tenant SET username = :username, password_hash = :password_hash WHERE id = :id"),
            {
                "username": f"{domain_username}_{row.id[:8]}",  # Make it unique
                "password_hash": default_password_hash,
                "id": row.id
            }
        )
    
    # Now make the columns NOT NULL
    op.alter_column('tenant', 'username', nullable=False)
    op.alter_column('tenant', 'password_hash', nullable=False)
    
    # Create unique indexes
    op.create_index(op.f('ix_tenant_email'), 'tenant', ['email'], unique=True)
    op.create_index(op.f('ix_tenant_username'), 'tenant', ['username'], unique=True)


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_tenant_username'), table_name='tenant')
    op.drop_index(op.f('ix_tenant_email'), table_name='tenant')
    op.drop_column('tenant', 'reset_token_expires')
    op.drop_column('tenant', 'reset_token')
    op.drop_column('tenant', 'email')
    op.drop_column('tenant', 'password_hash')
    op.drop_column('tenant', 'username')
    # ### end Alembic commands ###
