# /opt/bitnami/nginx/conf/server_blocks/ai.factorialsystems.io.conf

# --- Upstream (edit this to your gateway or FastAPI service) ---
# If your gateway runs on the same host/container at port 8080, this is fine.
# Otherwise point to the correct internal DNS name or IP:port.
upstream backend_gateway {
    server 127.0.0.1:8080;
    keepalive 64;
}

# --- WebSocket helper (safe to declare in this file; it's included inside `http` context) ---
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

# ---------------------------- HTTP (port 80) ----------------------------
server {
    listen 80;
    server_name ai.factorialsystems.io;

    # Only allow /api/v1 (exact and subpaths). Deny everything else.
    # Exact match for the bare path (no trailing slash)
    location = /api/v1 {
	    return 301 https://$host$request_uri;
    }

    # Prefix match for any subpath under /api/v1/
    location ^~ /api/v1/ {
	    return 301 https://$host$request_uri;
    }

    # /console (normalize to trailing slash, then HTTPS)
    location = /console {
        return 301 https://$host/console/;
    }

    # /console/ subpaths
    location ^~ /console/ {
        return 301 https://$host$request_uri;
    }

    # New: redirect /ws/chat to HTTPS
    location ^~ /ws/chat {
        return 301 https://$host$request_uri;
    }

    # Authorization subpath
    location = /auth {
	    return 301 https://$host/auth/;
    }

    location ^~ /auth/ {
	    return 301 https://$host$request_uri;
    }

    # Deny every other request on HTTP
    location / {
        return 444;  # drop connection silently
    }
}

# ---------------------------- HTTPS (port 443) ----------------------------
server {
    listen 443 ssl http2;
    server_name ai.factorialsystems.io;

    # Bitnami bncert typically maintains these symlinks:
    ssl_certificate /opt/bitnami/letsencrypt/certificates/ai.factorialsystems.io.crt;
    ssl_certificate_key /opt/bitnami/letsencrypt/certificates/ai.factorialsystems.io.key;

    # (Optional but sensible hardening)
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_prefer_server_ciphers on;

    # Only allow /api/v1 (exact and subpaths). Deny everything else.
    location = /api/v1 {
        proxy_http_version 1.1;
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket support
        proxy_set_header Upgrade    $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        proxy_read_timeout  3600s;
        proxy_send_timeout  3600s;

        proxy_pass http://backend_gateway;
    }

    location ^~ /api/v1/ {
        proxy_http_version 1.1;
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket support
        proxy_set_header Upgrade    $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        proxy_read_timeout  3600s;
        proxy_send_timeout  3600s;

        proxy_pass http://backend_gateway;
    }

    # Handle /auth without trailing slash
    location = /auth {
        return 301 https://$host/auth/;
    }

    location ^~ /auth/ {
        proxy_http_version 1.1;
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Additional headers for Spring Authorization Server
        proxy_set_header X-Forwarded-Host  $host;
        proxy_set_header X-Forwarded-Port  $server_port;

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Authorization server is accessible on host port 9002
        # The container internal port 9000 is mapped to host port 9002
        # Keep the /auth/ prefix when proxying
        proxy_pass http://127.0.0.1:9002/auth/;
    }

    # ---- /console rewrite ----
    location ^~ /console/ {
        proxy_http_version 1.1;
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

	# Let Console know it lives behind /console (some setups read this)
        proxy_set_header X-Forwarded-Prefix /console;

	proxy_redirect off;
        proxy_buffering off;

	# WebSocket support if console UI uses it
        proxy_set_header Upgrade    $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        proxy_pass http://localhost:9001/;   # notice the trailing slash drops '/console'
    }

    # Exact /console (without trailing slash)
    location = /console {
        return 301 /console/;
    }

    # --- WebSocket Chat only ---
    location /ws/chat {
        proxy_http_version 1.1;

        # Only accept real WebSocket upgrade requests
        if ($http_upgrade != "websocket") {
            return 403;   # block non-WS requests
        }

        proxy_set_header Upgrade           $http_upgrade;
        proxy_set_header Connection        $connection_upgrade;
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_read_timeout  3600s;
        proxy_send_timeout  3600s;

        # Forward to your chat WS backend
        proxy_pass http://localhost:8000;   # adjust port/service
    }

    # Deny every other request on HTTPS
    location / {
        return 444;
    }
}
